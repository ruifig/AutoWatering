#pragma once

namespace std
{

template<typename T>
class initializer_list
{
public:
	typedef T value_type;
	typedef const T& reference;
	typedef const T& const_reference;
	typedef size_t size_type;
	typedef const T* iterator;
	typedef const T* const_iterator;

private:
	iterator data;
	size_type len;

	// The compiler can call a private constructor
	constexpr initializer_list(const_iterator first, size_type len) : data(first), len(len)
	{
	}

public:
	constexpr initializer_list() noexcept : data(nullptr), len(0)
	{
	}
	constexpr size_type size() const noexcept
	{
		return len;
	}
	constexpr const_iterator begin() const noexcept
	{
		return data;
	}
	constexpr const_iterator end() const noexcept
	{
		return data + size();
	}
};

  /**
   *  @brief  Return an iterator pointing to the first element of
   *          the initializer_list.
   *  @param  __ils  Initializer list.
   *  @relates initializer_list
   */
template<class T>
constexpr const T* begin(initializer_list<T> il) noexcept
{
	return il.begin();
}

template<class T>
constexpr const T* end(initializer_list<T> il) noexcept
{
	return il.end();
}

} // namespace std
